[DEFAULT]
tcp_keepalive_interval = 30
debug = <%= node[:cinder][:debug] %>
log_dir = /var/log/cinder
use_syslog = <%= node[:cinder][:use_syslog] ? "true" : "false" %>
use_stderr = false
transport_url = <%= @rabbit_settings[:url] %>
rpc_response_timeout = <%= node[:cinder][:rpc_response_timeout] %>
control_exchange = cinder
max_header_line = <%= node[:cinder][:max_header_line] %>
wsgi_keep_alive = false
state_path = /var/lib/cinder
my_ip = <%= node[:cinder][:my_ip] %>

glance_api_servers = <%= @glance_server_protocol %>://<%= @glance_server_host %>:<%= @glance_server_port %>
glance_api_version = 2
<% unless @glance_server_insecure.nil? -%>
glance_api_insecure = <%= @glance_server_insecure %>
<% end -%>

enable_v3_api = true

<% unless @availability_zone.nil? -%>
storage_availability_zone = <%= @availability_zone %>
<% end -%>

<% unless @default_availability_zone.empty? -%>
default_availability_zone = <%= @default_availability_zone %>
<% end -%>
<% unless @default_volume_type.empty? -%>
default_volume_type = <%= @default_volume_type %>
<% end -%>

auth_strategy = keystone

<% if @use_multi_backend -%>
enabled_backends=<%= @volumes.each_with_index.collect { |backend,idx|
    "backend-#{backend['backend_driver']}-#{idx}"
}.join(',') %>
<% end -%>

nova_catalog_info = compute:nova:internalURL
nova_catalog_admin_info = compute:nova:adminURL
os_region_name = <%= @keystone_settings['endpoint_region'] %>
nova_api_insecure = <%= @nova_api_insecure %>
<% if @show_storage_location -%>
allowed_direct_url_schemes = cinder
<% end -%>

osapi_volume_listen = <%= @bind_host %>
osapi_volume_listen_port = <%= @bind_port %>
osapi_volume_workers = <%= [node["cpu"]["total"], 2, 4].sort[1] %>
osapi_volume_use_ssl = <%= node["cinder"]["api"]["protocol"] == "https" %>

strict_ssh_host_key_policy = <%= @strict_ssh_host_key_policy ? 'true' : 'false' %>

<%
  @volumes.each_with_index do |volume, volid|
    backend_id = "backend-#{volume['backend_driver']}-#{volid}"
-%>

  <% if @use_multi_backend -%>
[<%= backend_id %>]
volume_backend_name = <%= volume['backend_name'] %>
  <% end -%>

  <% if volume['backend_driver'] == 'blockbridge' -%><% end -%>
  <% if volume['backend_driver'] == 'coho' -%><% end -%>

  <% if volume['backend_driver'] == 'datera' -%>
    volume_driver = cinder.volume.drivers.datera.datera_iscsi.DateraDriver
  <% end -%>

  <% if volume['backend_driver'] == 'dell' -%><% end -%>
  <% if volume['backend_driver'] == 'disco' -%><% end -%>
  <% if volume['backend_driver'] == 'drbdmanage' -%><% end -%>

  <% if volume['backend_driver'] == 'emc' -%>
iscsi_target_prefix = iqn.1992-04.com.em
iscsi_ip_address = <%= volume["emc"]["emc_ecom_server_ip"] %>
cinder_emc_config_file=/etc/cinder/cinder_emc_config-<%= backend_id %>.xml
initiator_auto_registration = true
volume_driver = cinder.volume.drivers.dell_emc.vmax.iscsi.VMAXISCSIDriver
  <% end -%>

  <% if volume['backend_driver'] == 'eqlx' -%>
eqlx_group_name = <%= volume['eqlx']["eqlx_group_name"] %>
ssh_conn_timeout=<%= volume['eqlx']["ssh_conn_timeout"] %>
use_chap_auth = <%= volume['eqlx']["use_chap_auth"] %>
chap_username = <%= volume['eqlx']["chap_username"] %>
chap_password = <%= volume['eqlx']["chap_password"] %>
eqlx_pool = <%= volume['eqlx']["eqlx_pool"] %>

san_thin_provision = <%= volume['eqlx']["san_thin_provision"] %>
san_ip = <%= volume['eqlx']["san_ip"] %>
san_login = <%= volume['eqlx']["san_login"] %>
san_password = <%= volume['eqlx']["san_password"] %>

volume_driver = cinder.volume.drivers.eqlx.DellEQLSanISCSIDriver
  <% end -%>

  <% if volume['backend_driver'] == 'eternus' -%>
iscsi_target_prefix = iqn.2000-09.com.fujitsu
iscsi_ip_address = <%= volume["eternus"]["iscsi_ip"] %>
cinder_eternus_config_file=/etc/cinder/cinder_eternus_dx_config-<%= backend_id %>.xml
    <% if volume['eternus']['protocol'] == "iscsi" -%>
volume_driver = cinder.volume.drivers.fujitsu.eternus_dx_iscsi.FJDXISCSIDriver
    <% else -%>
volume_driver = cinder.volume.drivers.fujitsu.eternus_dx_fc.FJDXFCDriver
    <% end -%>
  <% end -%>

  <% if volume['backend_driver'] == 'flashsystem' -%><% end -%>

  <% if volume['backend_driver'] == 'gpfs' -%><% end -%>
  <% if volume['backend_driver'] == 'hgst' -%><% end -%>

  <% if volume['backend_driver'] == 'hitachi' -%>
hitachi_serial_number = <%= volume['hitachi']['hitachi_serial_number'] %>
hitachi_unit_name = <%= volume['hitachi']['hitachi_unit_name'] %>
hitachi_pool_id = <%= volume['hitachi']['hitachi_pool_id'] %>
hitachi_thin_pool_id = <%= volume['hitachi']['hitachi_thin_pool_id'] %>
hitachi_ldev_range = <%= volume['hitachi']['hitachi_ldev_range'] %>
hitachi_default_copy_method = <%= volume['hitachi']['hitachi_default_copy_method'] %>
hitachi_copy_speed = <%= volume['hitachi']['hitachi_copy_speed'] %>
hitachi_copy_check_interval = <%= volume['hitachi']['hitachi_copy_check_interval'] %>
hitachi_async_copy_check_interval = <%= volume['hitachi']['hitachi_async_copy_check_interval'] %>
hitachi_target_ports = <%= volume['hitachi']['hitachi_target_ports'] %>
hitachi_group_range = <%= volume['hitachi']['hitachi_group_range'] %>
hitachi_group_request = <%= volume['hitachi']['hitachi_group_request'] %>
hitachi_zoning_request = <%= volume['hitachi']['hitachi_zoning_request'] %>
hitachi_horcm_numbers = <%= volume['hitachi']['hitachi_horcm_numbers'] %>
hitachi_horcm_user = <%= volume['hitachi']['hitachi_horcm_user'] %>
hitachi_horcm_password = <%= volume['hitachi']['hitachi_horcm_password'] %>
hitachi_horcm_add_conf = <%= volume['hitachi']['hitachi_horcm_add_conf'] %>
hitachi_horcm_resource_lock_timeout = <%= volume['hitachi']['hitachi_horcm_resource_lock_timeout'] %>
hitachi_add_chap_user = <%= volume['hitachi']['hitachi_add_chap_user'] %>
hitachi_auth_method = <%= volume['hitachi']['hitachi_auth_method'] %>
hitachi_auth_user = <%= volume['hitachi']['hitachi_auth_user'] %>
hitachi_auth_password = <%= volume['hitachi']['hitachi_auth_password'] %>
    <% if volume['hitachi']['hitachi_storage_protocol'] == 'iscsi' -%>
volume_driver = cinder.volume.drivers.hitachi.hbsd_iscsi.HBSDISCSIDriver
    <% elsif volume['hitachi']['hitachi_storage_protocol'] == 'fc' -%>
volume_driver = cinder.volume.drivers.hitachi.hbsd_fc.HBSDFCDriver
    <% end -%>
  <% end -%>

  <% if volume['backend_driver'] == 'hp_3par' -%><% end -%>
  <% if volume['backend_driver'] == 'hp_lefthand' -%><% end -%>
  <% if volume['backend_driver'] == 'hp_msa' -%><% end -%>
  <% if volume['backend_driver'] == 'hp_xp' -%><% end -%>
  <% if volume['backend_driver'] == 'huawei' -%><% end -%>
  <% if volume['backend_driver'] == 'infortrend' -%><% end -%>
  <% if volume['backend_driver'] == 'lenovo' -%><% end -%>

  <% if volume['backend_driver'] == 'local' -%>
volume_group = <%= volume[:local][:volume_name] %>
lvm_type = thin
volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
  <% end -%>

  <% if volume['backend_driver'] == 'manual' -%>
volume_driver = <%= volume['manual']['driver'] %>
<%= volume['manual']['config'] %>
  <% end -%>

  <% if volume['backend_driver'] == 'netapp' -%>
netapp_storage_family = <%= volume['netapp']['storage_family'] %>
netapp_storage_protocol = <%= volume['netapp']['storage_protocol'] %>
netapp_server_hostname = <%= volume['netapp']['netapp_server_hostname'] %>
netapp_server_port = <%= volume['netapp']['netapp_server_port'] %>
netapp_transport_type = <%= volume['netapp']['netapp_transport_type'] %>
netapp_login = <%= volume['netapp']['netapp_login'] %>
netapp_password = <%= volume['netapp']['netapp_password'] %>
netapp_vserver = <%= volume['netapp']['vserver'] %>
netapp_vfiler = <%= volume['netapp']['netapp_vfiler'] %>
netapp_pool_name_search_pattern = <%= volume['netapp']['netapp_volume_list'] %>
volume_driver = cinder.volume.drivers.netapp.common.NetAppDriver
    <% if volume['netapp']['storage_protocol'] == 'nfs' -%>
nfs_shares_config=/etc/cinder/nfs_shares-<%= backend_id %>
    <% end -%>
  <% end -%>

  <% if volume['backend_driver'] == 'nfs' -%>
nfs_shares_config=/etc/cinder/nfs_shares-<%= backend_id %>
volume_driver = cinder.volume.drivers.nfs.NfsDriver
  <% end -%>

  <% if volume['backend_driver'] == 'nimble' -%><% end -%>
  <% if volume['backend_driver'] == 'peophetstor' -%><% end -%>
  <% if volume['backend_driver'] == 'pure' -%><% end -%>
  <% if volume['backend_driver'] == 'quobyte' -%><% end -%>

  <% if volume['backend_driver'] == 'raw' -%>
volume_group = <%= volume[:raw][:volume_name] %>
lvm_type = thin
volume_driver = cinder.volume.drivers.lvm.LVMVolumeDriver
  <% end -%>

  <% if volume['backend_driver'] == 'rbd' -%>
rbd_flatten_volume_from_snapshot = <%= volume['rbd']['flatten_volume_from_snapshot'] %>
rbd_pool = <%= volume['rbd']['pool'] %>
    <% unless volume['rbd']['user'].empty? -%>
rbd_user = <%= volume['rbd']['user'] %>
    <% end -%>
    <% if volume['rbd']['use_crowbar'] -%>
rbd_ceph_conf = /etc/ceph/ceph.conf
    <% else -%>
rbd_ceph_conf = <%= volume['rbd']['config_file'] %>
    <% end -%>
rbd_secret_uuid = <%= volume['rbd']['secret_uuid'] %>

volume_driver = cinder.volume.drivers.rbd.RBDDriver
  <% end -%>

  <% if volume['backend_driver'] == 'remotefs' -%><% end -%>
  <% if volume['backend_driver'] == 'scaleio' -%><% end -%>
  <% if volume['backend_driver'] == 'sheepdog' -%><% end -%>
  <% if volume['backend_driver'] == 'smbfs' -%><% end -%>
  <% if volume['backend_driver'] == 'solidfire' -%><% end -%>
  <% if volume['backend_driver'] == 'storewize' -%><% end -%>
  <% if volume['backend_driver'] == 'tegile' -%><% end -%>
  <% if volume['backend_driver'] == 'tintri' -%><% end -%>
  <% if volume['backend_driver'] == 'violin' -%><% end -%>

  <% if volume['backend_driver'] == 'vmware' -%>
vmware_host_ip = <%= volume['vmware']["host"] %>
vmware_host_username = <%= volume['vmware']["user"] %>
vmware_host_password = <%= volume['vmware']["password"] %>
vmware_volume_folder = <%= volume['vmware']["volume_folder"] %>
    <% unless volume['vmware']['ca_file'].empty? -%>
vmware_ca_file = <%= volume['vmware']['ca_file'] %>
    <% end -%>
    <% if volume['vmware']['insecure'] -%>
vmware_insecure = <%= volume['vmware']['insecure'] %>
    <% end -%>
    <% volume['vmware']['cluster_name'].each do |cluster| -%>
vmware_cluster_name = "<%= cluster %>"
    <% end -%>
volume_driver = cinder.volume.drivers.vmware.vmdk.VMwareVcVmdkDriver
  <% end -%>

  <% if volume['backend_driver'] == 'vzstorage' -%><% end -%>
  <% if volume['backend_driver'] == 'windows' -%><% end -%>
  <% if volume['backend_driver'] == 'xio' -%><% end -%>
  <% if volume['backend_driver'] == 'xiv_ds8k' -%><% end -%>
  <% if volume['backend_driver'] == 'xtremio' -%><% end -%>

  <% if volume['backend_driver'] == 'zfssa' -%>
volume_driver = cinder.volume.drivers.zfssaiscsi.ZFSSAISCSIDriver
  <% end -%>

  <% if node[:cinder][:use_multipath] -%>
use_multipath_for_image_xfer = true
  <% end -%>

iscsi_write_cache = off

  <% if @show_storage_location -%>
image_upload_use_cinder_backend = true
  <% end -%>

  <% if volume[volume['backend_driver']] && volume[volume['backend_driver']]['max_over_subscription_ratio'] -%>
max_over_subscription_ratio = <%= volume[volume['backend_driver']]['max_over_subscription_ratio'] %>
  <% end -%>

  <% break unless @use_multi_backend -%>
<% end -%>

[key_manager]
<% unless node[:cinder][:keymgr_fixed_key].empty? -%>
fixed_key = <%= node[:cinder][:keymgr_fixed_key].each_byte.map { |b| b.to_s(16) }.join %>
<% end -%>

[database]
connection = <%= @sql_connection %>
max_pool_size = <%= node[:cinder][:max_pool_size] %>
max_overflow = <%= node[:cinder][:max_overflow] %>
pool_timeout = <%= node[:cinder][:pool_timeout] %>

[keystone_authtoken]
auth_type = password
auth_uri = <%= @keystone_settings['public_auth_url'] %>
auth_url = <%= @keystone_settings['internal_auth_url'] %>
auth_version= <%= @keystone_settings['api_version_for_middleware'] %>
insecure = <%= @keystone_settings['insecure'] %>
region_name = <%= @keystone_settings['endpoint_region'] %>
username = <%= @keystone_settings['service_user'] %>
password = <%= @keystone_settings['service_password'] %>
project_name = <%= @keystone_settings['service_tenant'] %>
project_domain_name = <%= @keystone_settings["admin_domain"]%>
user_domain_name = <%= @keystone_settings["admin_domain"] %>
service_token_roles_required = true
service_token_roles = admin

[oslo_concurrency]
<% if @need_shared_lock_path -%>
lock_path = /var/run/openstack
<% else -%>
lock_path = /var/run/cinder
<% end -%>

[oslo_messaging_rabbit]
<% if @rabbit_settings[:cluster] -%>
amqp_durable_queues = <%= @rabbit_settings[:durable_queues] %>
rabbit_ha_queues = <%= @rabbit_settings[:ha_queues] %>
<% end -%>
rabbit_use_ssl = <%= @rabbit_settings[:use_ssl] %>
<% if @rabbit_settings[:client_ca_certs] -%>
kombu_ssl_ca_certs = <%= @rabbit_settings[:client_ca_certs] %>
<% end -%>

[ssl]
ca_file = <%= node[:cinder][:ssl][:ca_certs] if node[:cinder][:api][:protocol] == 'https' && node[:cinder][:ssl][:cert_required] %>
cert_file = <%= node[:cinder][:ssl][:certfile] if node[:cinder][:api][:protocol] == 'https' %>
key_file = <%= node[:cinder][:ssl][:keyfile] if node[:cinder][:api][:protocol] == 'https' %>

[volumes]
backups_enabled = false
