import os
from django.utils.translation import ugettext_lazy as _
from openstack_dashboard import exceptions

DEBUG = <%= @debug ? 'True' : 'False' %>
<%= @use_ssl ? '' : '# ' %>SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTOCOL', 'https')
ALLOWED_HOSTS = ['*']
LOGIN_URL = '/auth/login/'
LOGOUT_URL = '/auth/logout/'
LOGIN_REDIRECT_URL = '/'
<%= @use_ssl ? '' : '# ' %>CSRF_COOKIE_SECURE = True
<%= @use_ssl ? '' : '# ' %>SESSION_COOKIE_SECURE = True

HORIZON_CONFIG = {
    'dashboards': ('project', 'admin', 'settings',),
    'default_dashboard': 'project',
    'user_home': 'openstack_dashboard.views.get_user_home',
    'ajax_queue_limit': 10,
    'auto_fade_alerts': {
        'delay': 3000,
        'fade_duration': 1500,
        'types': ['alert-success', 'alert-info']
    },
    'help_url': "http://docs.openstack.org",
    'exceptions': {'recoverable': exceptions.RECOVERABLE,
                   'not_found': exceptions.NOT_FOUND,
                   'unauthorized': exceptions.UNAUTHORIZED},
}

HORIZON_CONFIG["password_validator"] = {
    "regex": '.{8,}',
    "help_text": "Your password must be at least 8 characters long."
}



LOCAL_PATH = os.path.dirname(os.path.abspath(__file__))

<% if (node[:platform_family] == "suse") -%>
from horizon.utils import secret_key
SECRET_KEY = secret_key.generate_or_read_from_file(os.path.join(LOCAL_PATH, '.secret_key_store'))
<% end -%>


CACHES = {
   'default': {
       'BACKEND' : 'django.core.cache.backends.memcached.MemcachedCache',
       'LOCATION' : '<%= "127.0.0.1:#{node[:horizon][:memcached][:port]}" %>',
   }
}

EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
OPENSTACK_HOST = "<%= @keystone_settings['internal_url_host'] %>"
OPENSTACK_KEYSTONE_URL = "<%= @keystone_settings['internal_auth_url'] %>"
OPENSTACK_KEYSTONE_DEFAULT_ROLE = "Member"
OPENSTACK_SSL_NO_VERIFY = <%= @insecure ? "True" : "False" %>

OPENSTACK_KEYSTONE_BACKEND = {
    'name': 'native',
    'can_edit_user': True,
    'can_edit_project': True
}

OPENSTACK_HYPERVISOR_FEATURES = {
    'can_set_mount_point': True,

    # NOTE: as of Grizzly this is not yet supported in Nova so enabling this
    # setting will not do anything useful
    'can_encrypt_volumes': False
}

OPENSTACK_NEUTRON_NETWORK = {
    'enable_lb': False
}

OPENSTACK_ENDPOINT_TYPE = "internalURL"

API_RESULT_LIMIT = 1000
API_RESULT_PAGE_SIZE = 20

TIME_ZONE = "<%= @timezone %>"

LOGGING = {
    'version': 1,
    # When set to True this will disable all logging except
    # for loggers specified in this configuration dictionary. Note that
    # if nothing is specified here and disable_existing_loggers is True,
    # django.db.backends will still log unless it is disabled explicitly.
    'disable_existing_loggers': False,
    'handlers': {
        'null': {
            'level': 'DEBUG',
            'class': 'django.utils.log.NullHandler',
        },
        'console': {
            # Set the level to "DEBUG" for verbose output logging.
            'level': 'INFO',
            'class': 'logging.StreamHandler',
        },
    },
    'loggers': {
        # Logging from django.db.backends is VERY verbose, send to null
        # by default.
        'django.db.backends': {
            'handlers': ['null'],
            'propagate': False,
        },
        'requests': {
            'handlers': ['null'],
            'propagate': False,
        },
        'horizon': {
            'handlers': ['console'],
            'propagate': False,
        },
        'openstack_dashboard': {
            'handlers': ['console'],
            'propagate': False,
        },
        'novaclient': {
            'handlers': ['console'],
            'propagate': False,
        },
        'keystoneclient': {
            'handlers': ['console'],
            'propagate': False,
        },
        'glanceclient': {
            'handlers': ['console'],
            'propagate': False,
        },
        'nose.plugins.manager': {
            'handlers': ['console'],
            'propagate': False,
        }
    }
}

SESSION_ENGINE = 'django.contrib.sessions.backends.cached_db'
DATABASES = {
    'default': {
        <% @db_settings.sort_by { |key, value| key }.each do |key,value| -%>
        '<%= key %>': <%= value %>,
        <% end -%>
    },
}

COMPRESS_OFFLINE = <%= @compress_offline ? "True" : "False" %>

SITE_BRANDING = "<%= @site_branding %>"

