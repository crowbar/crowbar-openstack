#!/bin/sh
# Enable command traces
set -x
# Exit on error
set -e

# Variables for this script
CONFIG_BASE=/etc/escm
SSL_CONFIG_PATH=${CONFIG_BASE}/ssl
COMPOSE_CONFIG_PATH=${CONFIG_BASE}/docker-compose
DOCKER_PATH=/docker

# Redirect all output to log file
exec &>> ${DOCKER_PATH}/logs/setup-machine-$(date '+%Y-%m-%d').log

echo "$(date '+%Y-%m-%d %H:%M:%S') starting setup..."

# Check if update is necessary
if [ -f ${DOCKER_PATH}/var.env.current ]; then
  if [ $(diff ${DOCKER_PATH}/var.env.current ${COMPOSE_CONFIG_PATH}/var.env | wc -l) == "0" ]; then
    exit
  fi
fi

# Enable automatic exporting of variables
set -a
# Read configuration files
source ${COMPOSE_CONFIG_PATH}/var.env
# Disable automatic exporting of variables
set +a

# If mandatory variables are unset, abort
if [ -z ${DB_PWD_CORE} ] || [ -z ${DB_PWD_APP} ] || [ -z ${KEY_SECRET} ] || [ -z ${HOST_FQDN} ] || [ -z ${DB_SUPERPWD} ]; then
    echo "Mandatory variables unset - aborting."
    exit 0
fi

# If containers are running, stop them
if [ -f ${DOCKER_PATH}/docker-compose-escm.yml ]; then
    if [ $(docker-compose -f ${DOCKER_PATH}/docker-compose-escm.yml ps -q | wc -l) != "0" ]; then
        docker-compose -f ${DOCKER_PATH}/docker-compose-escm.yml stop
        docker-compose -f ${DOCKER_PATH}/docker-compose-escm.yml rm -f
    fi
fi

# If http proxy is enabled, create Docker config file
if [ ${PROXY_ENABLED} == "true" ]; then
    if [ ! -d /etc/systemd/system/docker.service.d ]; then
        mkdir -p /etc/systemd/system/docker.service.d
    fi
    if [ ${PROXY_AUTH} == "true" ]; then
        cat <<EOF > /etc/systemd/system/docker.service.d/http-proxy.conf
[Service]
Environment="HTTP_PROXY=http://${PROXY_USER}:${PROXY_PWD}@${PROXY_HTTP_HOST}:${PROXY_HTTP_PORT}/" "HTTPS_PROXY=http://${PROXY_USER}:${PROXY_PWD}@${PROXY_HTTPS_HOST}:${PROXY_HTTPS_PORT}/" "NO_PROXY=${PROXY_NOPROXY}"
EOF
    else
        cat <<EOF > /etc/systemd/system/docker.service.d/http-proxy.conf
[Service]
Environment="HTTP_PROXY=http://${PROXY_HTTP_HOST}:${PROXY_HTTP_PORT}/" "HTTPS_PROXY=http://${PROXY_HTTPS_HOST}:${PROXY_HTTPS_PORT}/" "NO_PROXY=${PROXY_NOPROXY}"
EOF
    fi
    systemctl daemon-reload
    systemctl restart docker
# Otherwise remove Docker config file with proxy config
else
    if [ -f /etc/systemd/system/docker.service.d/http-proxy.conf ]; then
        rm -f /etc/systemd/system/docker.service.d/http-proxy.conf
        systemctl daemon-reload
        systemctl restart docker
    fi
fi

# If Docker registry authentication is enabled, create auth info file
if [ ${DOCKER_REGISTRY_AUTH} == "true" ]; then
    #Create auth file for Docker registry
    REGISTRY_USER_PASS_BASE64=$(printf "${DOCKER_REGISTRY_USER}:${DOCKER_REGISTRY_PWD}" | base64)
    mkdir -p /root/.docker
    cat <<EOF > /root/.docker/config.json
{
        "auths": {
                "${DOCKER_REGISTRY_HOST}:${DOCKER_REGISTRY_PORT}": {
                        "auth": "${REGISTRY_USER_PASS_BASE64}"
                }
        }
}
EOF
# Otherwise remove auth info file
else
    if [ -f /root/.docker/config.json ]; then
        rm -f /root/.docker/config.json
    fi
fi

# If default Docker registry (Dockerhub) is used, remove insecure registry config
if [ ${DOCKER_REGISTRY_DOCKERHUB} = "true" ]; then
    DOCKER_IMAGES_SOURCE="${DOCKER_REGISTRY_ORGANIZATION}/"
    if [ -f /etc/docker/daemon.json ]; then
        rm -f /etc/docker/daemon.json
        systemctl restart docker
    fi
# Otherwise, custom registry is used, so create insecure registry config
else
    cat <<EOF > /etc/docker/daemon.json
{
  "insecure-registries" : ["${DOCKER_REGISTRY_HOST}:${DOCKER_REGISTRY_PORT}"]
}
EOF
    systemctl restart docker
fi

# Create rsyslog configuration for Docker log files
if [ ! -f /etc/rsyslog.d/oscm.conf ]; then
    cat <<EOF > /etc/rsyslog.d/oscm.conf
local0.*        /docker/logs/oscm-db/oscm-db.out.log
local1.*        /docker/logs/oscm-core/oscm-core.out.log
local2.*        /docker/logs/oscm-app/oscm-app.out.log
local3.*        /docker/logs/oscm-birt/oscm-birt.out.log
local4.*        /docker/logs/oscm-branding/oscm-branding.out.log
local5.*        /docker/logs/oscm-help/oscm-help.out.log
EOF
    sed -i '/^local/d' /etc/rsyslog.conf
    systemctl restart rsyslog
fi

# Copy environment and configuration files to Docker directory
if [ -f ${COMPOSE_CONFIG_PATH}/.env ]; then
    cp ${COMPOSE_CONFIG_PATH}/.env ${DOCKER_PATH}
fi
if [ -f ${COMPOSE_CONFIG_PATH}/var.env ]; then
    cp ${COMPOSE_CONFIG_PATH}/var.env ${DOCKER_PATH}
fi

#TODO: Where does the deployer image come from?
# Create Docker directory structure and Docker Compose files
pushd ${DOCKER_PATH}
docker run --name deployer-directories-compose --rm -v ${DOCKER_PATH}:/target oscm-deployer

# Copy certificate files
if [ -f ${SSL_CONFIG_PATH}/escm.key ]; then
    for dir_privkey in ${DOCKER_PATH}/config/*; do
        cp -f ${SSL_CONFIG_PATH}/escm.key ${dir_privkey}/ssl/privkey
    done
fi
if [ -f ${SSL_CONFIG_PATH}/escm.crt ]; then
    for dir_privkey in ${DOCKER_PATH}/config/*; do
        cp -f ${SSL_CONFIG_PATH}/escm.crt ${dir_privkey}/ssl/cert
    done
    cp -f ${SSL_CONFIG_PATH}/escm.crt ${DOCKER_PATH}/config/certs
fi
if [ -f ${SSL_CONFIG_PATH}/escm.chain ]; then
    for dir_privkey in ${DOCKER_PATH}/config/*; do
        cp -f ${SSL_CONFIG_PATH}/escm.chain ${dir_privkey}/ssl/chain
    done
fi

#TODO: Where does the deployer image come from?
# Initialize the databases and start the application containers
docker run --name deployer-init-start --rm -v ${DOCKER_PATH}:/target -v /var/run/docker.sock:/var/run/docker.sock -e SYSLOG=true -e INITDB=true -e STARTUP=true oscm-deployer

# Backup the current configuration for update check by the next run
cp ${DOCKER_PATH}/var.env ${DOCKER_PATH}/var.env.current

echo "$(date '+%Y-%m-%d %H:%M:%S') setup finished."
