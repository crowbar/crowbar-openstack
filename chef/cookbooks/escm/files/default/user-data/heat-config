#!/bin/sh
# Enable command traces
set -x
# Exit on error
set -e
# Redirect all output to log file
exec &> /var/log/setup-cloud.log

# Variables for this script
DOCKER_PATH=/docker

# Create the config directory if it does not exist yet
if [ ! -d /etc/escm/config ]; then
    mkdir -p /etc/escm/config
fi

# Write the SSH public key to root's trusted keys file
CERT_STR="$SSH_CERT"
echo $CERT_STR >> /root/.ssh/authorized_keys

# Set up Cinder storage
# The Cinder volume ids are truncated to 27 characters when the device
# link in /dev/disk/by-id/ is created. Account for this by truncating the
# device name accordingly.
volume_dev_logs=$(printf '%.43s\n' $LOGS_VOLUME_DEV)
volume_dev_data=$(printf '%.43s\n' $DATA_VOLUME_DEV)

# Create a file system on the Cinder volumes
if ! file -Ls ${volume_dev_logs} | grep -q "filesystem data" ; then
    mkfs.ext4 "${volume_dev_logs}"
fi

if ! file -Ls ${volume_dev_data} | grep -q "filesystem data" ; then
    mkfs.ext4 "${volume_dev_data}"
fi

# Create fstab entries
if ! grep -qs "${volume_dev_logs}" /etc/fstab; then
    echo "${volume_dev_logs} ${DOCKER_PATH}/logs ext4 defaults 1 1" >> /etc/fstab
fi

if ! grep -qs "${volume_dev_data}" /etc/fstab; then
    echo "${volume_dev_data} ${DOCKER_PATH}/data ext4 defaults 1 1" >> /etc/fstab
fi

# Mount the Cinder volumes if they are not mounted yet
if ! grep -qs "${DOCKER_PATH}/logs" /proc/mounts; then
    if [ ! -d ${DOCKER_PATH}/logs ]; then
        mkdir -p ${DOCKER_PATH}/logs
    fi
    mount ${volume_dev_logs}
fi

if ! grep -qs "${DOCKER_PATH}/data" /proc/mounts; then
    if [ ! -d ${DOCKER_PATH}/data ]; then
        mkdir -p ${DOCKER_PATH}/data
    fi
    mount ${volume_dev_data}
fi

if [ $(grep SwapTotal /proc/meminfo | awk '{ print $2 }') -eq 0 ]; then
    dd if=/dev/zero of=${DOCKER_PATH}/data/swapfile bs=1G count=1
    echo "${DOCKER_PATH}/data/swapfile swap swap defaults 0 0"
    swapon ${DOCKER_PATH}/data/swapfile
fi

# Signal to OpenStack that we're finished and ready
WAIT_CURL_FULL="$WAIT_CURL --data-binary '{\"status\": \"SUCCESS\"}' --noproxy '*'"
eval ${WAIT_CURL_FULL}
