[DEFAULT]
ssl_only = <%= @vncproxy_ssl_enabled ? "True" : "False" %>
cert = <%= @vncproxy_cert_file %>
key = <%= @vncproxy_key_file %>
<% if @libvirt_type.eql?('zvm') -%>
instance_name_template=zvm%05x
<% end %>
my_ip = <%= node[:nova][:my_ip] %>
<% if @libvirt_type.eql?('ironic') %>scheduler_host_manager = ironic_host_manager<% end %>
notify_on_state_change = vm_and_task_state
state_path = /var/lib/nova
enabled_ssl_apis = <%= @ssl_enabled ? "osapi_compute,metadata" : "" %>
osapi_compute_listen = <%= @bind_host %>
osapi_compute_listen_port = <%= @bind_port_api %>
osapi_compute_workers = <%= [node["cpu"]["total"], 2, 4].sort[1] %>
metadata_listen = <%= @metadata_bind_address %>
metadata_listen_port = <%= @bind_port_metadata %>
metadata_workers = <%= [node["cpu"]["total"], 2, 4].sort[1] %>
instance_usage_audit_period = hour
image_cache_manager_interval = -1
<% if @libvirt_type.eql?('kvm') -%>
use_rootwrap_daemon = <%= @use_rootwrap_daemon %>
<% end -%>
<% if @vendordata_jsonfile %>
vendordata_jsonfile_path = <%= @vendordata_jsonfile %>
<% end -%>
auth_strategy = keystone
memcached_servers = <%= @memcached_servers.join(',') %>
instances_path = <%= node[:nova][:instances_path] %>
instance_usage_audit = True
block_device_allocate_retries = <%= node[:nova][:block_device][:allocate_retries] %>
block_device_allocate_retries_interval = <%= node[:nova][:block_device][:allocate_retries_interval] %>
reserved_host_memory_mb = <%= @reserved_host_memory %>
cpu_allocation_ratio = <%= node[:nova][:scheduler][:cpu_allocation_ratio] %>
ram_allocation_ratio = <%= node[:nova][:scheduler][:ram_allocation_ratio] %>
disk_allocation_ratio = <%= node[:nova][:scheduler][:disk_allocation_ratio] %>
<% if @use_baremetal_filters %>scheduler_use_baremetal_filters = true<% end -%>
<% if @has_itxt -%>scheduler_available_filters = nova.scheduler.filters.standard_filters<% end %>
<% if @has_itxt %>scheduler_default_filters = RetryFilter,AvailabilityZoneFilter,RamFilter,ComputeFilter,ComputeCapabilitiesFilter,ImagePropertiesFilter,TrustedFilter<% end %>
<% unless @track_instance_changes %>scheduler_tracks_instance_changes = false<% end %>
<% if @libvirt_type.eql?('vmware') -%>
compute_driver = vmwareapi.VMwareVCDriver
<% elsif @libvirt_type.eql?('zvm') -%>
compute_driver = nova.virt.zvm.ZVMDriver
<% elsif @libvirt_type.eql?('ironic') -%>
compute_driver = ironic.IronicDriver
<% else -%>
compute_driver = libvirt.LibvirtDriver
<% end -%>
<% if @libvirt_type.eql?('xen') -%>
use_cow_images = false
<% end -%>
firewall_driver = nova.virt.firewall.NoopFirewallDriver
<%= "ssl_ca_file = #{@ssl_ca_file}" if @ssl_cert_required %>
use_neutron = true
default_floating_pool = floating
dhcpbridge = <%= @dhcpbridge %>
linuxnet_interface_driver = ""
<% if @force_config_drive || @libvirt_type.eql?('zvm') %>
flat_injected = true
<% end -%>
dhcp_domain = <%= @neutron_dhcp_domain %>
security_group_api = neutron
<% if @force_config_drive and !@libvirt_type.eql?('zvm') %>
config_drive_format = vfat
<% end -%>
<% if @force_config_drive || @libvirt_type.eql?('zvm') %>
force_config_drive = True
<% end -%>
debug = <%= node[:nova][:debug] %>
verbose = <%= node[:nova][:verbose] ? 'True' : 'False' %>
log_dir = /var/log/nova
use_syslog = <%= node[:nova][:use_syslog] ? 'True' : 'False' %>
use_stderr = false
rpc_conn_pool_size = 64
executor_thread_pool_size = 256
transport_url = <%= @rabbit_settings[:url] %>
control_exchange = nova
<%= "zvm_image_default_password = #{node[:nova][:zvm][:zvm_image_default_password]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_xcat_server=#{node[:nova][:zvm][:zvm_xcat_server]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_xcat_username=#{node[:nova][:zvm][:zvm_xcat_username]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_xcat_password=#{node[:nova][:zvm][:zvm_xcat_password]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_xcat_master=#{node[:nova][:zvm][:zvm_xcat_master]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_diskpool=#{node[:nova][:zvm][:zvm_diskpool]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_diskpool_type=#{node[:nova][:zvm][:zvm_diskpool_type]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_host=#{node[:nova][:zvm][:zvm_host]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_scsi_pool=#{node[:nova][:zvm][:zvm_scsi_pool]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_config_drive_inject_password=#{node[:nova][:zvm][:zvm_config_drive_inject_password]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_reachable_timeout=#{node[:nova][:zvm][:zvm_reachable_timeout]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_user_profile=#{node[:nova][:zvm][:zvm_user_profile]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_user_default_password=#{node[:nova][:zvm][:zvm_user_default_password]}" if @libvirt_type.eql?('zvm') %>
<%= "zvm_user_default_privilege=#{node[:nova][:zvm][:zvm_user_default_privilege]}" if @libvirt_type.eql?('zvm') %>

[api_database]
<% if @api_database_connection -%>
connection = <%= @api_database_connection %>
<% end -%>
<% unless node[:nova][:api_db][:max_pool_size].nil? -%>
max_pool_size = <%= node[:nova][:api_db][:max_pool_size] %>
<% end -%>
<% unless node[:nova][:api_db][:max_overflow].nil? -%>
max_overflow = <%= node[:nova][:api_db][:max_overflow] %>
<% end -%>
<% unless node[:nova][:api_db][:pool_timeout].nil? -%>
pool_timeout = <%= node[:nova][:api_db][:pool_timeout] %>
<% end -%>

[cache]
backend = dogpile.cache.memcached
enabled = true
memcache_servers = <%= @memcached_servers.join(',') %>

[cinder]
catalog_info = volumev2:cinderv2:internalURL
os_region_name = <%= @keystone_settings['endpoint_region'] %>
insecure = <%= @cinder_insecure ? 'True' : 'False' %>
cross_az_attach = <%= node[:nova][:cross_az_attach] %>

[conductor]
workers=<%= [node["cpu"]["total"], 2, 4].sort[1] %>

[database]
<% if @database_connection -%>
connection = <%= @database_connection %>
<% end -%>
<% unless node[:nova][:db][:min_pool_size].nil? -%>
min_pool_size = <%= node[:nova][:db][:min_pool_size] -%>
<% end -%>
<% unless node[:nova][:db][:max_pool_size].nil? -%>
max_pool_size = <%= node[:nova][:db][:max_pool_size] %>
<% end -%>
<% unless node[:nova][:db][:max_overflow].nil? -%>
max_overflow = <%= node[:nova][:db][:max_overflow] %>
<% end -%>
<% unless node[:nova][:db][:pool_timeout].nil? -%>
pool_timeout = <%= node[:nova][:db][:pool_timeout] %>
<% end -%>

[glance]
<%= "host = #{@glance_server_host}" unless @glance_server_host.nil? %>
<%= "port = #{@glance_server_port}" unless @glance_server_host.nil? %>
protocol = <%= @glance_server_protocol %>
<%= "api_servers = #{@glance_server_protocol}://#{@glance_server_host}:#{@glance_server_port}" unless @glance_server_host.nil? %>
<%= "api_insecure = #{@glance_server_insecure ? 'True' : 'False'}" unless @glance_server_host.nil? %>

<% unless @ironic_settings.nil? -%>
[ironic]
auth_type = password
auth_url = <%= @keystone_settings['internal_auth_url'] %>
username = <%= @ironic_settings[:service_user] %>
password = <%= @ironic_settings[:service_password] %>
project_name = <%= @keystone_settings['service_tenant'] %>
project_domain_name = <%= @keystone_settings['admin_domain']%>
user_domain_name = <%= @keystone_settings['admin_domain'] %>
<% end -%>

[key_manager]
<% unless @keymgr_fixed_key.empty? -%>
fixed_key = <%= @keymgr_fixed_key.each_byte.map { |b| b.to_s(16) }.join %>
<% end -%>

[keystone_authtoken]
auth_type = password
auth_uri = <%= @keystone_settings['public_auth_url'] %>
auth_url = <%= @keystone_settings['internal_auth_url'] %>
auth_version= <%= @keystone_settings['api_version_for_middleware'] %>
insecure = <%= @keystone_settings['insecure'] %>
region_name = <%= @keystone_settings['endpoint_region'] %>
username = <%= @keystone_settings['service_user'] %>
password = <%= @keystone_settings['service_password'] %>
project_name = <%= @keystone_settings['service_tenant'] %>
project_domain_name = <%= @keystone_settings["admin_domain"]%>
user_domain_name = <%= @keystone_settings["admin_domain"] %>

[libvirt]
<% if %w(kvm lxc qemu uml xen parallels).include? @libvirt_type -%>
virt_type = <%= @libvirt_type %>
<% end -%>
<% if (@libvirt_type.eql?('xen') and @libvirt_migration and @shared_instances) or @libvirt_type.eql?('kvm') -%>
live_migration_inbound_addr = <%= @live_migration_inbound_fqdn %>
<% end -%>
<% if @libvirt_type.eql?('xen') -%>
  <% if @libvirt_migration and @shared_instances -%>
live_migration_flag = VIR_MIGRATE_UNDEFINE_SOURCE, VIR_MIGRATE_LIVE
  <% end %>
<% elsif @libvirt_type.eql?('kvm') -%>
  <% if @libvirt_migration -%>
    <% if @shared_instances -%>
live_migration_flag = VIR_MIGRATE_UNDEFINE_SOURCE, VIR_MIGRATE_PEER2PEER, VIR_MIGRATE_LIVE
    <% else -%>
block_migration_flag = VIR_MIGRATE_UNDEFINE_SOURCE, VIR_MIGRATE_PEER2PEER, VIR_MIGRATE_NON_SHARED_INC, VIR_MIGRATE_LIVE
    <% end -%>
  <% end -%>
<% end -%>
<%= "disk_prefix = xvd" if @libvirt_type.eql?('xen') %>
<%= "cpu_mode = #{@cpu_mode}" unless @cpu_mode.empty? %>
<%= "cpu_model = #{@cpu_model}" unless @cpu_model.empty? %>
<% if @libvirt_type.eql?('kvm') %>use_virtio_for_bridges = true<% end %>
<%= "volume_use_multipath = true" if @use_multipath %>
<%= "iser_use_multipath = true" if @use_multipath %>
mem_stats_period_seconds = 0

[neutron]
service_metadata_proxy = true
metadata_proxy_shared_secret = <%= node[:nova][:neutron_metadata_proxy_shared_secret] %>
url = <%= @neutron_protocol %>://<%= @neutron_server_host %>:<%= @neutron_server_port %>
region_name = <%= @keystone_settings['endpoint_region'] %>
auth_url = <%= KeystoneHelper.versioned_service_URL(@keystone_settings["protocol"],
               @keystone_settings["internal_url_host"],
               @keystone_settings["service_port"],
               "2.0") %>
auth_type = password
insecure = <%= @neutron_insecure ? 'True' : 'False' %>
password = <%= @neutron_service_password %>
project_name = <%= @keystone_settings['service_tenant'] %>
tenant_name = <%= @keystone_settings['service_tenant'] %>
timeout = <%= node[:nova][:neutron_url_timeout] %>
username = <%= @neutron_service_user %>

[oslo_concurrency]
<% if @need_shared_lock_path -%>
lock_path = /var/run/openstack
<% else -%>
lock_path = /var/run/nova
<% end -%>

[oslo_messaging_notifications]
driver = messagingv2

[oslo_messaging_rabbit]
rabbit_use_ssl = <%= @rabbit_settings[:use_ssl] %>
<% if @rabbit_settings[:client_ca_certs] -%>
kombu_ssl_ca_certs = <%= @rabbit_settings[:client_ca_certs] %>
<% end -%>

[serial_console]
enabled = <%= @serial_enabled ? "True" : "False" %>
base_url = ws://<%= @serialproxy_public_host %>:<%= node[:nova][:ports][:serialproxy] %>/
proxyclient_address = <%= node[:nova][:my_ip] %>
serialproxy_host = 0.0.0.0
serialproxy_port = 6083

[ssl]
<%= "ca_file = #{@ssl_ca_file}" if @ssl_cert_required %>
cert_file = <%= @ssl_cert_file %>
key_file = <%= @ssl_key_file %>

[trusted_computing]
<% if @has_itxt %>attestation_server=<%= @oat_appraiser_host %><% end %>
<% if @has_itxt %>attestation_server_ca_file=/etc/nova/oat_certfile.cer<% end %>
<% if @has_itxt %>attestation_port=<%= @oat_appraiser_port %><% end %>
<% if @has_itxt %>attestation_api_url=/AttestationService/resources<% end %>

[vmware]
<%= "host_ip = #{node[:nova][:vcenter][:host]}" if @libvirt_type.eql?('vmware') %>
<%= "host_username = #{node[:nova][:vcenter][:user]}" if @libvirt_type.eql?('vmware') %>
<%= "host_password = #{node[:nova][:vcenter][:password]}" if @libvirt_type.eql?('vmware') %>
<%= "ca_file=#{node[:nova][:vcenter][:ca_file]}" if @libvirt_type.eql?('vmware') && ! node[:nova][:vcenter][:ca_file].empty? %>
<%= "insecure=#{node[:nova][:vcenter][:insecure]}" if @libvirt_type.eql?('vmware') && node[:nova][:vcenter][:insecure] %>
<% if @libvirt_type.eql?('vmware') -%>
 <% node[:nova][:vcenter][:clusters].each do |cluster| -%>
cluster_name = "<%= cluster %>"
 <% end -%>
<% end -%>
<%= "datastore_regex = #{node[:nova][:vcenter][:datastore]}" if @libvirt_type.eql?('vmware') %>
<%= "vlan_interface = #{node[:nova][:vcenter][:interface]}" if @libvirt_type.eql?('vmware') %>

[vnc]
enabled = <%= @vnc_enabled ? "True" : "False" %>
keymap = <%= node[:nova][:vnc_keymap] %>
vncserver_listen = "0.0.0.0"
vncserver_proxyclient_address = <%= node[:nova][:my_ip] %>
novncproxy_host = <%= @bind_host %>
novncproxy_port = <%= @bind_port_novncproxy %>
novncproxy_base_url = <%= @vncproxy_ssl_enabled ? "https" : "http" %>://<%= @vncproxy_public_host %>:<%= node[:nova][:ports][:novncproxy] %>/vnc_auto.html
xvpvncproxy_host = <%= @bind_host %>

[wsgi]
max_header_line = <%= node[:nova][:max_header_line] %>
ssl_cert_file = <%= @ssl_cert_file %>
ssl_key_file = <%= @ssl_key_file %>
keep_alive = false
